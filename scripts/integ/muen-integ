#!/bin/bash

if [ ! $# -eq 2 ]; then
	echo "Usage: $0 <config_file> <build ID>"
	exit 1
fi

BUILDID=$2

SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

source $SCRIPTDIR/args.sh
source $SCRIPTDIR/func.sh

WORKDIR=$SCRIPTDIR/../../..
MULOG=$SCRIPTDIR/../mulog.py

SAVE_ARTIFACTS=0

# servers to kill on exit
KILL_ON_EXIT_PIDS=()

export AMT_PASSWORD=$AMT_PASSWORD

trap cleanup EXIT

cleanup()
{
	for pid in ${KILL_ON_EXIT_PIDS[@]}; do
		kill -kill $pid >>$LOGFILE 2>&1 || true
	done
}

save_artifacts()
{
	cp $WORKDIR/emulate/bochsout.txt $LOGDIR >>$LOGFILE 2>&1
	cp $WORKDIR/emulate/emulate.out $LOGDIR >>$LOGFILE 2>&1
	cp $WORKDIR/emulate/serial.out $LOGDIR >>$LOGFILE 2>&1
}

passed()
{
	log "State -> PASSED"
	exit 0
}

failed()
{
	log "State -> FAILED"
	if [ $SAVE_ARTIFACTS -ne 0 ]; then
		save_artifacts
	fi
	exit 1
}

expect()
{
	local file=$1
	local pattern=$2
	log "Expect pattern '$pattern' in file '$file'"
	$MULOG $file | grep "$pattern" >>$LOGFILE 2>&1
	if [ $? -ne 0 ]; then
		log "Expected pattern '$pattern' not found in '$file'"
		failed
	fi
}

expect_from_file()
{
	local pattern_file=$1
	local path=$2

	while IFS= read -r line
	do
		local file=`echo "$line" | cut -d\; -f1`
		local pattern=`echo "$line" | cut -d\; -f2`
		if [ -z "$file" ]; then
			continue
		fi

		expect $path/$file "$pattern"
	done < $pattern_file
}

file_exists()
{
	if [ ! -f $1 ]; then
		log "File '$1' does not exist"
		failed
	fi
}

bochs_emulate()
{
	SAVE_ARTIFACTS=1
	execute "make emulate"
	execute "sleep $BOOTWAIT_BOCHS"
	save_artifacts
	SAVE_ARTIFACTS=0

	expect_from_file $SCRIPTDIR/expect.common "$LOGDIR"
	expect_from_file $SCRIPTDIR/expect.bochs "$LOGDIR"

	execute "make -C emulate clean"
}

hw_deploy()
{
	local target_ip=$1
	local system=$2
	local platform=$3
	local expect=$4

	local target_logdir=$LOGDIR/$system-$platform
	execute "mkdir -p $target_logdir"

	execute "ping -c 6 $target_ip"
	xterm -e script -f -c "amtterm $target_ip" $target_logdir/serial.out &
	local pid_xterm=$!
	KILL_ON_EXIT_PIDS+=($pid_xterm)

	execute "make -C kernel clean"
	execute "make deploy HARDWARE=$platform SYSTEM=$system"

	cd $ROOT; python -m SimpleHTTPServer 10000 >$target_logdir/http.out 2>&1 &
	local pid_http=$!
	KILL_ON_EXIT_PIDS+=($pid_http)
	cd $WORKDIR

	execute "sleep $HW_BOOTWAIT"

	kill $pid_xterm >>$LOGFILE 2>&1
	kill $pid_http >>$LOGFILE 2>&1

	echo y | amttool $target_ip powerdown >>$LOGFILE 2>&1
	execute "make -C deploy clean"

	expect_from_file $SCRIPTDIR/expect.common "$target_logdir"
	expect_from_file $SCRIPTDIR/expect.hw_common "$target_logdir"

	if [ ! -z "$expect" ]; then
		file_exists $SCRIPTDIR/$expect
		expect_from_file $SCRIPTDIR/$expect "$target_logdir"
	fi
}

deploy_to_hardware()
{
	for item in ${TARGETS[@]}; do
		ip=`echo $item | cut -d\; -f1`
		export TARGET_IP=$ip
		system=`echo $item | cut -d\; -f2`
		platform=`echo $item | cut -d\; -f3`
		expect=`echo $item | cut -d\; -f4`
		log "Deploying to target $ip with system '$system' and platform '$platform'"
		hw_deploy $ip $system $platform $expect
	done
}

mkdir -p $LOGDIR

echo "Logging to file $LOGFILE"

execute "cd $WORKDIR"

bochs_emulate
deploy_to_hardware

passed
