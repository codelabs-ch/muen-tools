#!/bin/bash

if [ ! $# -eq 2 ]; then
	echo "Usage: $0 <config_file> <build ID>"
	exit 1
fi

BUILDID=$2

SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

source $SCRIPTDIR/args.sh
source $SCRIPTDIR/func.sh

WORKDIR=$SCRIPTDIR/../../..
MULOG=$SCRIPTDIR/../mulog.py

SAVE_ARTIFACTS=0

declare log_pid

# servers to kill on exit
KILL_ON_EXIT_PIDS=()

export AMT_PASSWORD=$AMT_PASSWORD

trap cleanup EXIT

acquire_file_lock()
{
	while [ -f $LOCK ]; do
		log "$0 already running with PID `cat $LOCK`, waiting ..."
		sleep 10
	done

	echo $$ > $LOCK
}

release_file_lock()
{
	if [ `cat $LOCK` -eq $$ ]; then
		rm -f $LOCK
	fi
}

cleanup()
{
	for pid in ${KILL_ON_EXIT_PIDS[@]}; do
		kill -kill $pid >>$LOGFILE 2>&1 || true
	done
	release_file_lock
}

save_artifacts()
{
	cp $WORKDIR/emulate/bochsout.txt $LOGDIR >>$LOGFILE 2>&1
	cp $WORKDIR/emulate/emulate.out $LOGDIR >>$LOGFILE 2>&1
	cp $WORKDIR/emulate/serial.out $LOGDIR >>$LOGFILE 2>&1
}

passed()
{
	log "State -> PASSED"
	exit 0
}

failed()
{
	log "State -> FAILED"
	if [ $SAVE_ARTIFACTS -ne 0 ]; then
		save_artifacts
	fi
	exit 1
}

expect()
{
	local file=$1
	local pattern=$2
	log "Expect pattern '$pattern' in file '$file'"
	$MULOG $file | grep "$pattern" >>$LOGFILE 2>&1
	if [ $? -ne 0 ]; then
		log "Expected pattern '$pattern' not found in '$file'"
		failed
	fi
}

expect_from_file()
{
	local pattern_file=$1
	local path=$2

	while IFS= read -r line
	do
		local file=`echo "$line" | cut -d\; -f1`
		local pattern=`echo "$line" | cut -d\; -f2`
		if [ -z "$file" ]; then
			continue
		fi

		expect $path/$file "$pattern"
	done < $pattern_file
}

file_exists()
{
	if [ ! -f $1 ]; then
		log "File '$1' does not exist"
		failed
	fi
}

basename_noext()
{
	fname=${1##*/}
	echo ${fname%.*}
}

hw_targetlogdir()
{
	local system=$(basename_noext $1)
	local hardware=$(basename_noext $2)

	echo $LOGDIR/$system-$hardware
}

bochs_emulate()
{
	SAVE_ARTIFACTS=1
	execute "make emulate"
	execute "sleep $BOOTWAIT_BOCHS"
	save_artifacts
	SAVE_ARTIFACTS=0

	execute "make -C emulate clean"

	expect_from_file $SCRIPTDIR/expect.common "$LOGDIR"
	expect_from_file $SCRIPTDIR/expect.bochs "$LOGDIR"
}

capture_output()
{
	local target_logdir=$1
	local cmd=$2

	xterm -e script -f -c "$cmd" $target_logdir/serial.out &
	log_pid=$!
	KILL_ON_EXIT_PIDS+=$log_pid
}

hw_deploy()
{
	local target_logdir=$1
	local system=$2
	local hardware=$3
	local expect=$4

	execute "make -C kernel clean"
	execute "make deploy HARDWARE=$hardware SYSTEM=$system"

	date -u +%Y%m%d > $ROOT/current_date
	cd $ROOT; python -m SimpleHTTPServer 10000 >$target_logdir/http.out 2>&1 &
	local pid_http=$!
	KILL_ON_EXIT_PIDS+=($pid_http)
	cd $WORKDIR

	execute "sleep $BOOTWAIT_HW"

	kill $log_pid >>$LOGFILE 2>&1
	kill $pid_http >>$LOGFILE 2>&1

	execute "make -C deploy shutdown"
	execute "make -C deploy clean"

	expect_from_file $SCRIPTDIR/expect.common "$target_logdir"
	expect_from_file $SCRIPTDIR/expect.hw_common "$target_logdir"

	if [ ! -z "$expect" ]; then
		file_exists $SCRIPTDIR/$expect
		expect_from_file $SCRIPTDIR/$expect "$target_logdir"
	fi
}

deploy_to_hardware()
{
	for item in ${TARGETS[@]}; do
		system=`echo $item | cut -d\; -f2`
		hardware=`echo $item | cut -d\; -f3`
		expect=`echo $item | cut -d\; -f4`
		ip=`echo $item | cut -d\; -f1`
		target_logdir=$(hw_targetlogdir "$system" "$hardware")
		execute "mkdir -p $target_logdir"

		log "Deploying system '$system' to hardware '$hardware'"
		if [ -z "$ip" ]; then
			# power bar, xhci debug
			log "Using EnerGenie power mechanism"
			export TARGET_PWR_MECH=energenie
			capture_output $target_logdir "$LOG_CMD_XHCI"
		else
			# Intel AMT
			log "Using Intel AMT power mechanism for target IP $ip"
			export TARGET_IP=$ip
			execute "ping -c 6 $ip"
			capture_output $target_logdir "$LOG_CMD_AMT $ip"
		fi
		hw_deploy $target_logdir $system $hardware $expect
	done
}

generate_metrics()
{
	execute "make -C kernel metrics"
}

mkdir -p $LOGDIR

echo "Logging to file $LOGFILE"

acquire_file_lock

execute "cd $WORKDIR"
execute "make -C deploy clean"

bochs_emulate
deploy_to_hardware
generate_metrics

passed
