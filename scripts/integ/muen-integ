#!/bin/bash

if [ ! $# -eq 1 ]; then
	echo "Usage: $0 <config_file>"
	exit 1
fi

SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

source $SCRIPTDIR/args.sh
source $SCRIPTDIR/func.sh

WORKDIR=$SCRIPTDIR/../../..

SAVE_ARTIFACTS=0

# servers to kill on exit
KILL_ON_EXIT_PIDS=()

export PATH=/usr/lib/ccache:/opt/gnat/bin:/opt/spark/bin:$PATH
export DISPLAY=:0
export CC="ccache gcc"

export AMT_PASSWORD=$AMT_PASSWORD

trap cleanup EXIT

cleanup()
{
	for pid in ${KILL_ON_EXIT_PIDS[@]}; do
		log "Killing server process with PID $pid"
		kill -kill $pid >>$LOGFILE 2>&1 || true
	done
}

save_artifacts()
{
	cp $WORKDIR/emulate/bochsout.txt $LOGDIR >>$LOGFILE 2>&1
	cp $WORKDIR/emulate/emulate.out $LOGDIR >>$LOGFILE 2>&1
	cp $WORKDIR/emulate/serial.out $LOGDIR >>$LOGFILE 2>&1
}

send_mail()
{
	status=$1
	message=$2
	subject="[muen-integration] $status: B$BUILDID, $FBRANCH, $COMMIT"

	__send_mail "$status" "$subject" "$message"
}

passed()
{
	log "State -> PASSED"
	send_mail PASSED "Integration test successful for:\n\n$GITLOG"
}

failed()
{
	log "State -> FAILED"
	send_mail FAILED "Integration test failed for:\n\n$GITLOG\n\nLog:\n`tail -n 50 $LOGFILE`"
	if [ $SAVE_ARTIFACTS -ne 0 ]; then
		save_artifacts
	fi
	exit 1
}

expect()
{
	file=$1
	pattern=$2
	log "Expect pattern '$pattern' in file '$file'"
	grep "$pattern" $file >>$LOGFILE 2>&1
	if [ $? -ne 0 ]; then
		log "Expected pattern '$pattern' not found in '$file'"
		failed
	fi
}

bochs_emulate()
{
	SAVE_ARTIFACTS=1
	execute "make emulate"
	execute "sleep $BOOTWAIT_BOCHS"
	save_artifacts
	SAVE_ARTIFACTS=0

	expect $LOGDIR/serial.out "Booting Muen kernel"
	expect $LOGDIR/serial.out "Welcome to Linux on Muen SK"

	expect $LOGDIR/bochsout.txt "CPU 1 started up at 0000:00000000 by APIC"
	expect $LOGDIR/bochsout.txt "CPU 2 started up at 0000:00000000 by APIC"
	expect $LOGDIR/bochsout.txt "CPU 3 started up at 0000:00000000 by APIC"

	execute "make -C emulate clean"
}

hw_deploy()
{
	hardware=$1
	target_ip=$2

	hw_logdir=$LOGDIR/$hardware
	execute "mkdir -p $hw_logdir"

	execute "ping -c 6 $target_ip"
	xterm -e script -f -c "amtterm $target_ip" $hw_logdir/amt.out &
	pid_xterm=$!
	log "xterm pid is $pid_xterm"

	execute "make deploy HARDWARE=$hardware SYSTEM=integration_tests"

	cd $ROOT; python -m SimpleHTTPServer 10000 >$hw_logdir/http.out 2>&1 &
	pid_http=$!
	log "SimpleHTTPServer pid is $pid_http"
	cd $WORKDIR

	execute "sleep $HW_BOOTWAIT"

	kill $pid_xterm >>$LOGFILE 2>&1
	if [ $? -ne 0 ]; then
		log "Stopping AMT console failed, retrying on exit"
		KILL_ON_EXIT_PIDS+=($pid_xterm)
	fi
	kill $pid_http >>$LOGFILE 2>&1
	if [ $? -ne 0 ]; then
		log "Stopping HTTP server failed, retrying on exit"
		KILL_ON_EXIT_PIDS+=($pid_http)
	fi

	echo y | amttool $target_ip powerdown >>$LOGFILE 2>&1
	execute "make -C deploy clean"

	expect $hw_logdir/amt.out "Booting Muen kernel"
	expect $hw_logdir/amt.out "Routing IRQ 01 as vector 21 to CPU 00 with APIC ID 00"
	expect $hw_logdir/amt.out "Routing IRQ 14 as vector 34 to CPU 01 with APIC ID 01"
	expect $hw_logdir/amt.out "Routing IRQ 10 as vector 30 to CPU 03 with APIC ID 03"
	expect $hw_logdir/amt.out "VT-d DMA address translation enabled for IOMMU 01"
	expect $hw_logdir/amt.out "VT-d DMA address translation enabled for IOMMU 02"
	expect $hw_logdir/amt.out "Console output round 100"
	expect $hw_logdir/amt.out "100%"
	expect $hw_logdir/amt.out "stresstest DONE"
	expect $hw_logdir/amt.out "integtest DONE"

	expect $hw_logdir/http.out "200"
}

mkdir -p $LOGDIR

echo "Logging to file $LOGFILE"

GITLOG=`git log -1`

execute "cd $WORKDIR"

bochs_emulate
hw_deploy $HARDWARE $TARGET_IP

passed
