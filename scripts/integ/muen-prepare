#!/bin/bash

if [ ! $# -eq 3 ]; then
	echo "Usage: $0 <config_file> <commit> <build ID>"
	exit 1
fi

COMMIT=$2
BUILDID=$3

SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

source $SCRIPTDIR/args.sh
source $SCRIPTDIR/func.sh

WORKDIR=$ROOT/muen
INTEG_SCRIPT=$WORKDIR/tools/scripts/integ/muen-integ

HARBOR="Harbormaster build http://muen-builder.codelabs.local/B$BUILDID"

trap release_file_lock EXIT

acquire_file_lock()
{
	while [ -f $LOCK ]; do
		log "$0 already running with PID `cat $LOCK`, waiting ..."
		sleep 10
	done

	echo $$ > $LOCK
}

release_file_lock()
{
	if [ `cat $LOCK` -eq $$ ]; then
		rm -f $LOCK
	fi
}

check_if_head()
{
	remotes=`git branch -r --contains $COMMIT`
	for remote in $remotes
	do
		head=`git rev-parse $remote`
		if [ "$COMMIT" = "$head" ]; then
			log "Commit $COMMIT is HEAD of $remote branch"
			FBRANCH=$remote
			return
		fi
	done

	log "Commit $COMMIT is not a branch HEAD, skipping build"
	exit 1
}

workdir_clean()
{
	execute "git remote prune origin"
	execute "make distclean"
	execute "cd components/linux/src"
	execute "git clean -dxf"
	execute "cd $WORKDIR"
}

send_mail()
{
	status=$1
	message=$2
	subject="[muen-prepare] $status (workdir): B$BUILDID"

	__send_mail "$status" "$subject" "$message"
}

failed()
{
	log "Failed to prepare workdir '$WORKDIR'"
	send_mail FAILED "Workdir setup failed.\n\nLog:\n`tail -n 50 $LOGFILE`"
	exit 1
}

mkdir -p $LOGDIR
echo "Logging to file $LOGFILE"
echo > $LOGFILE

log "Muen integration test starting for commit $COMMIT"
log "$HARBOR"
log "Preparing workdir '$WORKDIR'"

acquire_file_lock

execute "cd $WORKDIR"
execute "git fetch"

check_if_head

execute "git checkout $COMMIT"
execute "git submodule update"

workdir_clean

log "Calling '$INTEG_SCRIPT' for branch $FBRANCH"
export FBRANCH=$FBRANCH
export BUILDID=$BUILDID

# must be the last command to get the exit status right
$INTEG_SCRIPT $CONFIG
