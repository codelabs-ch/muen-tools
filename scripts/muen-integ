#!/bin/bash

if [ ! $# -eq 2 ]; then
	echo "Usage: $0 <commit> <build ID>"
	exit 1
fi

COMMIT=$1
BUILDID=$2
HARBOR="Harbormaster build http://muen-builder.codelabs.local/B$BUILDID"

ROOT=$HOME/Builds
LOGDIR=$ROOT/logs/$BUILDID
LOGFILE=$LOGDIR/build.log
SAVE_ARTIFACTS=0

# mail settings
RECIPIENTS="reet@codelabs.ch ken@codelabs.ch"
SENDER="muen.builder@gmail.com"

# servers
PID_HTTP=0
PID_XTERM=0

TARGET_IP=192.168.254.2

export PATH=/usr/lib/ccache:/opt/gnat/bin:/opt/spark/bin:$PATH
export DISPLAY=:0
export AMT_PASSWORD=XXX
export CC="ccache gcc"

trap cleanup EXIT

cleanup()
{
	if [ $PID_HTTP -ne 0 ]; then
		log "Stopping HTTP server ($PID_HTTP)"
		kill $PID_HTTP || true >>$LOGFILE 2>&1
	fi
	if [ $PID_XTERM -ne 0 ]; then
		log "Stopping AMT console ($PID_XTERM)"
		kill $PID_XTERM || true >>$LOGFILE 2>&1
	fi
}

log()
{
	echo $1 | tee -a $LOGFILE
}

send_mail()
{
	status=$1
	message=$2

	for mail in $RECIPIENTS
	do
		echo -e "To: $mail\nFrom: $SENDER\nSubject: [muen-integration] $status: B$BUILDID, $FBRANCH, $COMMIT\n\n$message" | /usr/sbin/sendmail -t -F "$SENDER" -f "$SENDER"
	done
}

check_if_head()
{
	remotes=`git branch -r --contains $COMMIT`
	for remote in $remotes
	do
		head=`git rev-parse $remote`
		if [ "$COMMIT" = "$head" ]; then
			log "Commit $COMMIT is HEAD of $remote branch"
			FBRANCH=$remote
			return
		fi
	done

	log "Commit $COMMIT is not a branch HEAD, skipping build"
	exit 1
}

save_artifacts()
{
	cp $WORKDIR/emulate/bochsout.txt $LOGDIR >>$LOGFILE 2>&1
	cp $WORKDIR/emulate/emulate.out $LOGDIR >>$LOGFILE 2>&1
	cp $WORKDIR/emulate/serial.out $LOGDIR >>$LOGFILE 2>&1
}

passed()
{
	log "State -> PASSED"
	send_mail PASSED "Integration test successful for:\n\n$GITLOG\n\n$HARBOR"
}

failed()
{
	log "State -> FAILED"
	send_mail FAILED "Integration test failed for:\n\n$GITLOG\n\nLog:\n`cat $LOGFILE`"
	if [ $SAVE_ARTIFACTS -ne 0 ]; then
		save_artifacts
	fi
	exit 1
}

execute()
{
	cmd=$1
	log "Executing command '$cmd'"
	$cmd >> $LOGFILE 2>&1
	status=$?
	if [ $status -ne 0 ]; then
		log "! Command '$cmd' failed (status $status)"
		failed
	fi
}

expect()
{
	file=$1
	pattern=$2
	log "Expect pattern '$pattern' in file '$file'"
	grep "$pattern" $file >>$LOGFILE 2>&1
	if [ $? -ne 0 ]; then
		log "Expected pattern '$pattern' not found in '$file'"
		failed
	fi
}

bochs_emulate()
{
	BOOTWAIT=40

	SAVE_ARTIFACTS=1
	execute "make emulate"
	execute "sleep $BOOTWAIT"
	save_artifacts
	SAVE_ARTIFACTS=0

	expect $LOGDIR/serial.out "Booting Muen kernel"
	expect $LOGDIR/serial.out "Welcome to Linux on Muen SK"

	expect $LOGDIR/bochsout.txt "CPU 1 started up at 0000:00000000 by APIC"
	expect $LOGDIR/bochsout.txt "CPU 2 started up at 0000:00000000 by APIC"
	expect $LOGDIR/bochsout.txt "CPU 3 started up at 0000:00000000 by APIC"

	execute "make -C emulate clean"
}

nuc_deploy()
{
	BOOTWAIT=110

	execute "ping -c 6 $TARGET_IP"
	xterm -e script -f -c "amtterm $TARGET_IP" $LOGDIR/amt.out &
	PID_XTERM=$!
	log "xterm pid is $PID_XTERM"

	execute "make deploy HARDWARE=intel-nuc-dc53427hye SYSTEM=integration_tests"

	cd $ROOT; python -m SimpleHTTPServer 10000 >$LOGDIR/http.out 2>&1 &
	PID_HTTP=$!
	log "SimpleHTTPServer pid is $PID_HTTP"
	cd $WORKDIR

	execute "sleep $BOOTWAIT"

	kill $PID_XTERM >>$LOGFILE 2>&1
	if [ $? -ne 0 ]; then
		log "Stopping AMT console failed, retrying on exit"
	else
		PID_XTERM=0
	fi
	kill $PID_HTTP >>$LOGFILE 2>&1
	if [ $? -ne 0 ]; then
		log "Stopping HTTP server failed, retrying on exit"
	else
		PID_HTTP=0
	fi

	echo y | amttool $TARGET_IP powerdown >>$LOGFILE 2>&1
	execute "make -C deploy clean"

	expect $LOGDIR/amt.out "Booting Muen kernel"
	expect $LOGDIR/amt.out "Routing IRQ 01 as vector 21 to CPU 00 with APIC ID 00"
	expect $LOGDIR/amt.out "Routing IRQ 14 as vector 34 to CPU 01 with APIC ID 01"
	expect $LOGDIR/amt.out "Routing IRQ 10 as vector 30 to CPU 03 with APIC ID 03"
	expect $LOGDIR/amt.out "VT-d DMA address translation for IOMMU 01 enabled"
	expect $LOGDIR/amt.out "VT-d DMA address translation for IOMMU 02 enabled"
	expect $LOGDIR/amt.out "Console output round 100"
	expect $LOGDIR/amt.out "100%"
	expect $LOGDIR/amt.out "stresstest DONE"
	expect $LOGDIR/amt.out "integtest DONE"

	expect $LOGDIR/http.out "200"
}

mkdir -p $LOGDIR

log "Muen integration test starting for commit $COMMIT"
log "$HARBOR"
echo "Logging to file $LOGFILE"

execute "cd $ROOT"

WORKDIR=$ROOT/muen

execute "cd $WORKDIR"
execute "git remote prune origin"
execute "git fetch"
check_if_head

execute "git checkout $COMMIT"
execute "make distclean"
execute "cd subjects/linux/src"
execute "git clean -dxf"
execute "cd $WORKDIR"

GITLOG=`git log -1`
execute "git submodule update"

bochs_emulate
nuc_deploy

passed
