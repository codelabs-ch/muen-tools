package body Skp.Subjects
is

   type Trap_Table_Type is array (Trap_Range) of Trap_Entry_Type;

   Null_Trap_Table : constant Trap_Table_Type := Trap_Table_Type'
     (others => Null_Trap);

   type Signal_Table_Type is array (Signal_Range) of Signal_Entry_Type;

   Null_Signal_Table : constant Signal_Table_Type := Signal_Table_Type'
     (others => Null_Signal);

   type Subject_Spec_Type is record
      CPU_Id             : Skp.CPU_Range;
      PML4_Address       : SK.Word64;
      EPT_Pointer        : SK.Word64;
      VMCS_Address       : SK.Word64;
      IO_Bitmap_Address  : SK.Word64;
      MSR_Bitmap_Address : SK.Word64;
      Stack_Address      : SK.Word64;
      Entry_Point        : SK.Word64;
      CR0_Value          : SK.Word64;
      CR4_Value          : SK.Word64;
      VMX_Controls       : VMX_Controls_Type;
      Trap_Table         : Trap_Table_Type;
      Signal_Table       : Signal_Table_Type;
   end record;

   type Subject_Spec_Array is array (Skp.Subject_Id_Type) of Subject_Spec_Type;

   Subject_Specs : constant Subject_Spec_Array := Subject_Spec_Array'(
      0 => Subject_Spec_Type'(
       CPU_Id             => 0,
       PML4_Address       => 16#00000000001f0000#,
       EPT_Pointer        => 0,
       VMCS_Address       => 16#0000000000001000#,
       IO_Bitmap_Address  => 16#00000000001a0000#,
       MSR_Bitmap_Address => 16#0000000000900000#,
       Stack_Address      => 16#0000000000120000#,
       Entry_Point        => 16#0000000000000abc#,
       CR0_Value          => 16#0000000080010031#,
       CR4_Value          => 16#0000000000002020#,
       VMX_Controls       => VMX_Controls_Type'(
          Exec_Pin    => 65,
          Exec_Proc   => 2996411904,
          Exec_Proc2  => 64,
          Exit_Ctrls  => 4227584,
          Entry_Ctrls => 512),
       Trap_Table         => Trap_Table_Type'(
          0 => Trap_Entry_Type'(Dst_Subject => 2, Dst_Vector => 256),
          48 => Trap_Entry_Type'(Dst_Subject => 2, Dst_Vector => 12),
          others => Null_Trap),
       Signal_Table       => Signal_Table_Type'(
          17 => Signal_Entry_Type'(
            Kind        => Asynchronous,
            Dst_Subject => 2,
            Dst_Vector  => 32),
          18 => Signal_Entry_Type'(
            Kind        => Handover,
            Dst_Subject => 2,
            Dst_Vector  => 256),
          others => Null_Signal)),
      1 => Subject_Spec_Type'(
       CPU_Id             => 1,
       PML4_Address       => 0,
       EPT_Pointer        => 16#00000000001f401e#,
       VMCS_Address       => 16#0000000000002000#,
       IO_Bitmap_Address  => 16#00000000001b0000#,
       MSR_Bitmap_Address => 16#0000000000910000#,
       Stack_Address      => 16#0000000000120000#,
       Entry_Point        => 16#0000000000000abc#,
       CR0_Value          => 16#0000000000000031#,
       CR4_Value          => 16#0000000000002000#,
       VMX_Controls       => VMX_Controls_Type'(
          Exec_Pin    => 65,
          Exec_Proc   => 2996313088,
          Exec_Proc2  => 194,
          Exit_Ctrls  => 4227584,
          Entry_Ctrls => 0),
       Trap_Table         => Null_Trap_Table,
       Signal_Table       => Null_Signal_Table),
      2 => Subject_Spec_Type'(
       CPU_Id             => 0,
       PML4_Address       => 16#00000000001f8000#,
       EPT_Pointer        => 0,
       VMCS_Address       => 16#0000000000003000#,
       IO_Bitmap_Address  => 16#00000000001c0000#,
       MSR_Bitmap_Address => 16#0000000000920000#,
       Stack_Address      => 16#0000000000120000#,
       Entry_Point        => 16#0000000000000abc#,
       CR0_Value          => 16#0000000080010031#,
       CR4_Value          => 16#0000000000002020#,
       VMX_Controls       => VMX_Controls_Type'(
          Exec_Pin    => 65,
          Exec_Proc   => 2996411904,
          Exec_Proc2  => 64,
          Exit_Ctrls  => 4227584,
          Entry_Ctrls => 512),
       Trap_Table         => Trap_Table_Type'(
          0 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          2 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          3 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          4 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          5 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          6 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          7 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          8 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          9 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          10 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          11 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          12 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          13 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          14 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          15 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          16 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          17 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          19 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          20 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          21 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          22 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          23 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          24 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          25 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          26 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          27 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          28 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          29 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          30 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          31 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          32 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          33 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          34 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          36 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          37 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          39 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          40 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          41 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          43 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          44 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          45 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          46 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          47 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          48 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          49 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          50 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          51 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          53 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          54 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          55 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          56 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          57 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          58 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          59 => Trap_Entry_Type'(Dst_Subject => 0, Dst_Vector => 32),
          others => Null_Trap),
       Signal_Table       => Null_Signal_Table));

   -------------------------------------------------------------------------

   function Get_CPU_Id (Subject_Id : Skp.Subject_Id_Type) return Skp.CPU_Range
   is
   begin
      --# accept Warning, 444, "CPU_Id is in CPU_Range (obviously)";
      --# assume Subject_Specs (Subject_Id).CPU_Id in Skp.CPU_Range;
      --# end accept;
      return Subject_Specs (Subject_Id).CPU_Id;
   end Get_CPU_Id;

   -------------------------------------------------------------------------

   function Get_CR0 (Subject_Id : Skp.Subject_Id_Type) return SK.Word64
   is
   begin
      --# accept Warning, 444, "CR0_Value is Word64 (obviously)";
      --# assume Subject_Specs (Subject_Id).CR0_Value in SK.Word64;
      --# end accept;
      return Subject_Specs (Subject_Id).CR0_Value;
   end Get_CR0;

   -------------------------------------------------------------------------

   function Get_CR4 (Subject_Id : Skp.Subject_Id_Type) return SK.Word64
   is
   begin
      --# accept Warning, 444, "CR4_Value is Word64 (obviously)";
      --# assume Subject_Specs (Subject_Id).CR4_Value in SK.Word64;
      --# end accept;
      return Subject_Specs (Subject_Id).CR4_Value;
   end Get_CR4;

   -------------------------------------------------------------------------

   function Get_Entry_Point
     (Subject_Id : Skp.Subject_Id_Type)
      return SK.Word64
   is
   begin
      --# accept Warning, 444, "Entry_Point is Word64 (obviously)";
      --# assume Subject_Specs (Subject_Id).Entry_Point in SK.Word64;
      --# end accept;
      return Subject_Specs (Subject_Id).Entry_Point;
   end Get_Entry_Point;

   -------------------------------------------------------------------------

   function Get_EPT_Pointer
     (Subject_Id : Skp.Subject_Id_Type)
      return SK.Word64
   is
   begin
      --# accept Warning, 444, "EPT_Pointer is Word64 (obviously)";
      --# assume Subject_Specs (Subject_Id).EPT_Pointer in SK.Word64;
      --# end accept;
      return Subject_Specs (Subject_Id).EPT_Pointer;
   end Get_EPT_Pointer;

   -------------------------------------------------------------------------

   function Get_IO_Bitmap_Address
     (Subject_Id : Skp.Subject_Id_Type)
      return SK.Word64
   is
   begin
      --# accept Warning, 444, "IO_Bitmap_Address is Word64 (obviously)";
      --# assume Subject_Specs (Subject_Id).IO_Bitmap_Address in SK.Word64;
      --# end accept;
      return Subject_Specs (Subject_Id).IO_Bitmap_Address;
   end Get_IO_Bitmap_Address;

   -------------------------------------------------------------------------

   function Get_MSR_Bitmap_Address
     (Subject_Id : Skp.Subject_Id_Type)
      return SK.Word64
   is
   begin
      --# accept Warning, 444, "MSR_Bitmap_Address is Word64 (obviously)";
      --# assume Subject_Specs (Subject_Id).MSR_Bitmap_Address in SK.Word64;
      --# end accept;
      return Subject_Specs (Subject_Id).MSR_Bitmap_Address;
   end Get_MSR_Bitmap_Address;

   -------------------------------------------------------------------------

   function Get_PML4_Address
     (Subject_Id : Skp.Subject_Id_Type)
      return SK.Word64
   is
   begin
      --# accept Warning, 444, "PML4_Address is Word64 (obviously)";
      --# assume Subject_Specs (Subject_Id).PML4_Address in SK.Word64;
      --# end accept;
      return Subject_Specs (Subject_Id).PML4_Address;
   end Get_PML4_Address;

   -------------------------------------------------------------------------

   function Get_Signal
     (Subject_Id : Skp.Subject_Id_Type;
      Signal_Nr  : Signal_Range)
      return Signal_Entry_Type
   is
   begin
      return Subject_Specs (Subject_Id).Signal_Table (Signal_Nr);
   end Get_Signal;

   -------------------------------------------------------------------------

   function Get_Stack_Address
     (Subject_Id : Skp.Subject_Id_Type)
      return SK.Word64
   is
   begin
      --# accept Warning, 444, "Stack_Address is Word64 (obviously)";
      --# assume Subject_Specs (Subject_Id).Stack_Address in SK.Word64;
      --# end accept;
      return Subject_Specs (Subject_Id).Stack_Address;
   end Get_Stack_Address;

   -------------------------------------------------------------------------

   function Get_Trap
     (Subject_Id : Skp.Subject_Id_Type;
      Trap_Nr    : Trap_Range)
      return Trap_Entry_Type
   is
   begin
      return Subject_Specs (Subject_Id).Trap_Table (Trap_Nr);
   end Get_Trap;

   -------------------------------------------------------------------------

   function Get_VMCS_Address
     (Subject_Id : Skp.Subject_Id_Type)
      return SK.Word64
   is
   begin
      --# accept Warning, 444, "VMCS_Address is Word64 (obviously)";
      --# assume Subject_Specs (Subject_Id).VMCS_Address in SK.Word64;
      --# end accept;
      return Subject_Specs (Subject_Id).VMCS_Address;
   end Get_VMCS_Address;

   -------------------------------------------------------------------------

   function Get_VMX_Controls
     (Subject_Id : Skp.Subject_Id_Type)
      return VMX_Controls_Type
   is
   begin
      return Subject_Specs (Subject_Id).VMX_Controls;
   end Get_VMX_Controls;

end Skp.Subjects;
