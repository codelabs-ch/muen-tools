<doc name="Muen System Specification">
 <author>The Muen Team</author>
 <version>0.1</version>

 <latex_preamble>
  \usepackage{pdfpages}
  \usepackage{listings}
  \usepackage{pifont,mdframed}

  \definecolor{mygreen}{rgb}{0,0.6,0}
  \definecolor{mygray}{rgb}{0.5,0.5,0.5}
  \definecolor{mymauve}{rgb}{0.58,0,0.82}

  \lstset{
  backgroundcolor=\color{white},
  basicstyle=\footnotesize\ttfamily,
  breakatwhitespace=false,
  breaklines=true,
  captionpos=b,
  commentstyle=\color{mygreen},
  extendedchars=true,
  rangeprefix=&lt;!--D\ @Lst\ ,
  rangesuffix=\ -->,
  includerangemarker=false,
  frame=single,
  keepspaces=true,
  keywordstyle=\color{blue},
  language=Octave,
  numbers=left,
  numbersep=5pt,
  numberstyle=\tiny\color{mygray},
  rulecolor=\color{black},
  showspaces=false,
  showstringspaces=false,
  showtabs=false,
  stepnumber=2,
  stringstyle=\color{mymauve},
  tabsize=2,
  title=\lstname
  }

  \newenvironment{warning}
  {\par\begin{mdframed}[linewidht=1pt,linecolor=red]
  \begin{list}{}{\leftmargin=1cm
  \labelwidth=\leftmargin}\item[\color{red}\Large\ding{43}]}
  {\end{list}\end{mdframed}\par}
 </latex_preamble>

 <xsd id="system_src.xsd" label="Policy Schema Documentation" priority="10" section="schema" file="generated/system_src.xsd" type="systemType" />

 <section id="introduction" label="Introduction" priority="0">
  <text priority="0">
   The Muen system policy is a description of a component-based system running
   on top of the Muen Separation Kernel. It defines what hardware resources are
   present, how many active components (called subjects) the system is composed
   of, how they interact and which system resources they are allowed to access.
   The contents a Muen system policy is composed of is outlined in section
   \ref{intro-policy-content} of this document.

   A system integrator specifies and configures such a component-based system at
   integration time in XML format. The Muen toolchain transforms the system
   description in multiple steps to the final system description, resolving
   abstractions which exist to make live simpler and less error-prone to the
   integrator. The various XML-formats involved in this process are described in
   section \ref{intro-policy-format}, an overview of the Muen toolchain is
   presented in section \ref{intro-integration}.

   The Muen Separation Kernel (SK) is a policy enforcer, in the sense that it
   has no knowledge about the actual content of the generated data structures.
   The most important and final step in the integration of a Muen system is
   therefore the actual generation of the data structures which guarantee
   subject isolation and the composition of the final system image. This step is
   performed by a trusted system composer called (static) $\tau$0.  This is
   explained in section \ref{tau0-concept}.

   Section \ref{schema} then specifies the XML-schema for the system source
   format of the Muen system policy. Explanations and examples illustrate how to
   configure a component-based system with the Muen SK.
  </text>

  <section id="intro-policy-content" label="Policy Content" priority="0">
   <text priority="0">
    The Muen policy specifies the following properties of a system:

    \begin{itemize}
    \item Configuration values
    \item Hardware resources
    \item Platform description
    \item Kernel diagnostics device
    \item Physical memory regions
    \item Device domains
    \item Events
    \item Communication channels
    \item Components
    \item Subjects
    \item Scheduling plans
    \end{itemize}

    The policy therefore serves as a static description of a Muen system. Since
    all aspects of the system are fixed at integration time the policy is very
    well suited for automated and manual validation prior to system execution.

    The details of each property is explained with examples in the XSD-schema of
    the format source policy in section \ref{schema}.
   </text>
  </section>

  <section id="intro-policy-format" label="Policy Format" priority="0">
   <text priority="0">
    The system policy is specified in XML. There are currently three different
    policy formats:

    \begin{itemize}
    \item Source Format
    \item Format A
    \item Format B
    \end{itemize}

    The motivation to have several policy formats is to provide abstractions and a
    compact way for users to specify a system while simultaneously facilitate
    reduced complexity of tools operating on the policy.

    The implementation of such tools is simplified by the absence of
    higher-level abstractions which would make the extraction of input data more
    involved. As an example, the tool responsible for page table generation can
    directly access all virtual memory mappings of a subject and must not
    concern itself with channels. The channel abstraction has already been
    broken down into the corresponding memory elements during the policy
    compilation step of the build process.

    The following sections give more detail about a specfic format.

    \begin{warning}
    Only the policy in format source is specified in this document, as the other
    formats are considered \emph{internal}. While it is possible to specify a
    system policy in format A or B, it is not recommended.
    \end{warning}
   </text>

   <section id="intro-policy-format-src" label="Source Format" priority="0">
    <text priority="0">
     The user-specified policy is written in the \emph{source format}.
     Constructs such as channels or events provide abstractions to simplify the
     specification of component-based systems. Many XML elements and attributes
     are optional and will be filled in with default values during later steps
     of the policy compilation process.

     Kernel and $\tau$0 resources are not part of the source format since they are also
     automatically added by the policy expansion step.

     Additionally the use of configuration values enables easy parametrization of
     the system policy.

     The policy in source format in specified in section \ref{schema}.
    </text>
   </section>

   <section id="intro-policy-format-a" label="Format A" priority="0">
    <text priority="0">
     Format A is a processed version of the source format where all includes are
     resolved and abstractions such as channels have been broken down into their
     underlying elements. For example, a channel is expanded to a physical
     memory region and the corresponding writer and reader subject mappings with
     the appropriate access rights.

     In this format all implicit elements, such as for example automatically
     generated page table memory regions, are specified. The kernel and $\tau$0
     configuration is also declared as part of format A.

     The only optional attributes are addresses of physical memory regions.
    </text>
   </section>

   <section id="intro-policy-format-b" label="Format B" priority="0">
    <text priority="0">
     Format B is equivalent to Format A except that all physical memory regions
     have a fixed location (i.e. their physical address is set).
    </text>
   </section>
  </section>

  <section id="intro-integration" label="System Integration" priority="0">
   <text priority="0">
    A Muen system specified via the system policy outlined in the previous
    sections and specified in section \ref{schema} is transformed and integrated
    by various tools to generate a bootable system image.

    The directed graph \ref{fig:integ} illustrates the process.

    \begin{figure}[hp]
    \centering
    \includegraphics[width=1\textwidth,height=0.96\textheight,keepaspectratio]{build_overview.eps}
    \caption{System Integration}
    \label{fig:integ}
    \end{figure}
   </text>

   <section id="tau0-concept" label="$\tau$0 Concept" priority="0">
    <text priority="0">
     This final system description transformed by the toolchain as explained in
     the previsous section is again transformed to an XML command stream and fed
     together with other build artifacts to the trusted system composer $\tau$0.

     TODO: explain tau0.
    </text>
   </section>
  </section>

  <section id="validation" label="Policy Validation" priority="0">
   <text priority="0">
    As explained in section \ref{intro-integration}, the Muen system policy is
    transformed by various tools. Before a tool performs actions on the policy,
    it checks all required preconditions via \emph{validator} procedures. For
    example a tool accessing physical devices via subject logical device
    references will execute a validator checking such references for validity.

    Before the policy is used to generate system structures like page tables and
    the final system image, the allocated and expanded policy is again validated
    by executing a comprehensive set of checks. This is done by the
    \texttt{mucfgvalidate} tool.

    The following sections list the various checks executed by
    \texttt{mucfgvalidate} and the other Muen build tools in the toolchain.
   </text>
  </section>

 </section>

 <section id="schema" label="Schema" priority="0"/>

</doc>
