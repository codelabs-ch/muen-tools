<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">

 <xs:complexType name="eventsType">
  <xs:annotation>
   <xs:documentation>
    Events are an activity caused by a subject (source) that impacts a second
    subject (target) or is directed at the kernel. Events are declared globally
    and have a unique name to be unambiguous. An event must have a single source
    and one target.

    Subjects can use events to either deliver an interrupt, hand over execution to
    or reset the state of a target subject. The first kind of event provides a
    basic notification mechanism and enables the implementation of event-driven
    services. The second type facilitates suspension of execution of the source
    subject and switching to the target. Such a construct is used to pass the
    thread of execution on to a different subject, e.g. invocation of a debugger
    subject if an error occurs in the source subject. The third kind is used to
    faciliate the restart of subjects.

    An event can also have the same source and target, which is called
    \emph{self} event. Such events are useful to implement para-virtualized
    timers in VM subjects for example.

    Kernel events are special in that they are targeted at the kernel. The
    currently supported events are system reboot and shutdown.

    For documentation about linking physical events to source- and
    target-subjects, see section \ref{system_src.xsd:subjectEventsType}.

    See line \ref{lst:af-lineref-events} in listing \ref{lst:annotated-policy}
    for an example events section.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="event" type="eventType" minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="eventSourceType">
  <xs:sequence>
   <xs:element name="group" type="eventGroupType" minOccurs="1" maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="eventTargetType">
  <xs:sequence>
   <xs:element name="event" type="targetEventEntryType" minOccurs="1" maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="sourceEventEntryType">
  <xs:complexContent>
   <xs:extension base="baseEventWithIDType">
    <xs:group ref="sourceEventActionsGroup" minOccurs="0" maxOccurs="1"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>

 <xs:complexType name="baseEventType">
  <xs:attribute name="logical"  type="nameType" use="required"/>
  <xs:attribute name="physical" type="nameType" use="required"/>
 </xs:complexType>

 <xs:complexType name="baseEventWithIDType">
  <xs:complexContent>
   <xs:extension base="baseEventType">
    <xs:attribute name="id" type="xs:nonNegativeInteger" use="required"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>

 <xs:simpleType name="eventGroupNameType">
  <xs:restriction base="xs:string">
   <xs:enumeration value="vmx_exit"/>
   <xs:enumeration value="vmcall"/>
  </xs:restriction>
 </xs:simpleType>

 <xs:complexType name="eventType">
  <xs:annotation>
   <xs:documentation>
    The \texttt{eventType} specifies an event by name and mode.
   </xs:documentation>
  </xs:annotation>
  <xs:attribute name="name" type="nameType" use="required">
   <xs:annotation>
    <xs:documentation>
     Name of the event.
    </xs:documentation>
   </xs:annotation>
  </xs:attribute>
  <xs:attribute name="mode" type="eventModeType" use="required">
   <xs:annotation>
    <xs:documentation>
     Mode of the event.
    </xs:documentation>
   </xs:annotation>
  </xs:attribute>
 </xs:complexType>

 <xs:complexType name="eventActionInjectInterruptType">
  <xs:attribute name="vector" type="vectorType" use="required"/>
 </xs:complexType>

 <xs:complexType name="eventActionUnmaskIrqType">
  <xs:attribute name="number" type="irqNumberType" use="required"/>
 </xs:complexType>

 <xs:complexType name="eventActionNoParamType"/>

 <xs:group name="sourceEventActionsGroup">
  <xs:choice>
   <xs:element name="system_reboot"   type="eventActionNoParamType"/>
   <xs:element name="system_panic"    type="eventActionNoParamType"/>
   <xs:element name="system_poweroff" type="eventActionNoParamType"/>
   <xs:element name="unmask_irq"      type="eventActionUnmaskIrqType"/>
  </xs:choice>
 </xs:group>

 <xs:group name="targetEventActionsGroup">
  <xs:choice>
   <xs:element name="inject_interrupt" type="eventActionInjectInterruptType" minOccurs="0" maxOccurs="1"/>
   <xs:element name="reset"            type="eventActionNoParamType"         minOccurs="0" maxOccurs="1"/>
  </xs:choice>
 </xs:group>

</xs:schema>
