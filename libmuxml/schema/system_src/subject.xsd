<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">

 <xs:complexType name="subjectType">
  <xs:annotation>
   <xs:documentation>
    A subject is an instance of a component, i.e. an active component in the
    system policy that may be scheduled. Its specification references a
    component and maps all requested logical resources to physical resources
    provided by the system.  Additional resources to the ones requested by the
    component can be specified here. This enables specialization of the base
    component specification.

    See line \ref{lst:af-lineref-subject} in listing \ref{lst:annotated-policy}
    for an example subject declaration.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="vcpu"       type="vcpuType"               minOccurs="0" maxOccurs="1"/>
   <xs:element name="bootparams" type="xs:string"              minOccurs="0" maxOccurs="unbounded"/>
   <xs:element name="memory"     type="memoryRefsType"         minOccurs="0" maxOccurs="1"/>
   <xs:element name="devices"    type="devicesRefType"         minOccurs="0" maxOccurs="1"/>
   <xs:element name="events"     type="subjectEventsType"      minOccurs="1" maxOccurs="1"/>
   <xs:element name="channels"   type="channelReferencesType"  minOccurs="0" maxOccurs="1"/>
   <xs:element name="monitor"    type="monitorType"            minOccurs="0" maxOccurs="1"/>
   <xs:choice minOccurs="1" maxOccurs="1">
    <xs:element name="component" type="componentReferenceType"/>
    <xs:element name="sibling"   type="namedRefType"/>
   </xs:choice>
  </xs:sequence>
  <xs:attributeGroup ref="subjectBaseAttrs"/>
 </xs:complexType>

 <xs:complexType name="monitorType">
  <xs:annotation>
   <xs:documentation>
    The monitor abstraction enables subjects to request access to certain data
    of another subject specified by name. Possible child elements are:

    \begin{itemize}
    \item State
    \item Timed\_Events
    \item Interrupts
    \item Loader
    \end{itemize}

    See the Muen Component Specification document for details about these
    subject monitor interfaces.

    See line \ref{lst:af-lineref-subject-monitor} in listing
    \ref{lst:annotated-policy} for an example monitor section.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="state"       type="monitorSubjectRefType" minOccurs="0" maxOccurs="unbounded"/>
   <xs:element name="timed_event" type="monitorSubjectRefType" minOccurs="0" maxOccurs="unbounded"/>
   <xs:element name="interrupts"  type="monitorSubjectRefType" minOccurs="0" maxOccurs="unbounded"/>
   <xs:element name="loader"      type="loaderSubjectRefType"  minOccurs="0" maxOccurs="1"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="loaderSubjectRefType">
  <xs:annotation>
   <xs:documentation>
    The \texttt{loader} mechanism effectively puts the loaded subject denoted by
    the \texttt{subject} attribute under loader control, as it is not able to
    start without the help of the loader.

    In more detail, the \texttt{loader} monitor element instructs the expander
    tool to map all memory regions of the referenced subject into the address
    space of the monitor subject, using \texttt{virtualAddress} as offset in the
    address space of the loader.

    If a memory region of the loaded subject is writable and file-backed, the
    region is replaced with an empty region and linked via the \texttt{hashRef}
    mechanism to the original region which is mapped into the loader.

    The state of the loaded subject is then invalidated by clearing the
    \texttt{CR4.VMXE} bit in the initial subject CR4 register value. If such a
    subject is scheduled by the kernel, a VMX exit \emph{VM-entry failure due to
    invalid guest state} (33) occurs. See Intel SDM Vol. 3C, "23.7 Enabling and
    Entering VMX Operation" and Intel SDM Vol 3C, "23.8 Restrictions on VMX
    Operation" for more details. This trap is linked to the loader via normal
    VMX event handling. After handover, the loader initializes the memory
    regions replaced by the expander with the designated content.

    All information required to \emph{load} the loaded subject is provided to
    the loader subject via its own sinfo API. Memory regions prefixed with
    \texttt{monitor\_sinfo\_} provide access to the sinfo regions of the loaded
    subjects. Regions prefixed with \texttt{monitor\_state\_} specify memory
    regions containing the subject register state of the loaded subject.

    The difference between the \texttt{monitor\_sinfo\_} memory region address
    in the loader and the address of the \texttt{sinfo} memory region in the
    target sinfo information denotes the \texttt{virtualAddress} offset
    attribute of the \texttt{loader} element in the policy. This information
    combined is enough to fully construct the initial state of the loaded
    subject, or to reset a subject to its initial state on demand.

    The loader may also optionally check the hashes of the restored regions, as
    this information is provided via the sinfo mechanism as well.

    See line \ref{lst:af-lineref-subject-mon-loader} in listing
    \ref{lst:annotated-policy} for an example loader element.
   </xs:documentation>
  </xs:annotation>
  <xs:attribute name="subject" type="nameType" use="required">
   <xs:annotation>
    <xs:documentation>
     Name of subject under loader control.
    </xs:documentation>
   </xs:annotation>
  </xs:attribute>
  <xs:attribute name="logical" type="nameType" use="required">
   <xs:annotation>
    <xs:documentation>
     Logical name of loader element.
    </xs:documentation>
   </xs:annotation>
  </xs:attribute>
  <xs:attribute name="virtualAddress" type="word64Type" use="required">
   <xs:annotation>
    <xs:documentation>
     Address offset of loaded subject memory mappings.
    </xs:documentation>
   </xs:annotation>
  </xs:attribute>
 </xs:complexType>

 <xs:complexType name="monitorSubjectRefType">
  <xs:complexContent>
   <xs:extension base="loaderSubjectRefType">
    <xs:attribute name="writable" type="booleanType" use="required"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>

 <xs:complexType name="componentReferenceType">
  <xs:annotation>
   <xs:documentation>
    The \texttt{component} reference element specifies which component this
    subject instantiates. All logical resources required by the component must
    be mapped to physical resources of the appropriate type. Validators make
    sure that all requirements are satisfied and that no mapping has been
    omitted.

    See line \ref{lst:af-lineref-subject-comp} in listing
    \ref{lst:annotated-policy} for an example component reference.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="map" type="resourceMappingType" minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
  <xs:attribute name="ref" type="nameType" use="required"/>
 </xs:complexType>

 <xs:complexType name="resourceMappingType">
  <xs:sequence>
   <xs:element name="map" type="resourceMappingType" minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
  <xs:attribute name="logical"  type="nameType" use="required"/>
  <xs:attribute name="physical" type="nameType" use="required"/>
 </xs:complexType>

</xs:schema>
