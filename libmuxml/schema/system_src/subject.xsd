<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">

 <xs:complexType name="subjectType">
  <xs:annotation>
   <xs:documentation>
    A subject is an instance of a component, i.e. an active component in the
    system policy that may be scheduled. Its specification references a
    component and maps all requested logical resources to physical resources
    provided by the system.  Additional resources to the ones requested by the
    component can be specified here. This enables specialization of the base
    component specification.

    See line \ref{lst:af-lineref-subject} in listing \ref{lst:annotated-policy}
    for an example subject declaration.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="vcpu"       type="vcpuType"               minOccurs="0" maxOccurs="1"/>
   <xs:element name="bootparams" type="xs:string"              minOccurs="0" maxOccurs="unbounded"/>
   <xs:element name="memory"     type="memoryRefsType"         minOccurs="0" maxOccurs="1"/>
   <xs:element name="devices"    type="devicesRefType"         minOccurs="0" maxOccurs="1"/>
   <xs:element name="events"     type="subjectEventsType"      minOccurs="1" maxOccurs="1"/>
   <xs:element name="channels"   type="channelReferencesType"  minOccurs="0" maxOccurs="1"/>
   <xs:element name="monitor"    type="monitorType"            minOccurs="0" maxOccurs="1"/>
   <xs:choice minOccurs="1" maxOccurs="1">
    <xs:element name="component" type="componentReferenceType"/>
    <xs:element name="sibling"   type="namedRefType"/>
   </xs:choice>
  </xs:sequence>
  <xs:attributeGroup ref="subjectBaseAttrs"/>
 </xs:complexType>

 <xs:complexType name="monitorType">
  <xs:annotation>
   <xs:documentation>
    The monitor abstraction enables subjects to request access to certain data
    of another subject specified by name. Possible child elements are:

    \begin{itemize}
    \item State
    \item Timed\_Events
    \item Interrupts
    \item Loader
    \end{itemize}

    See the Muen Component Specification document for details about these
    subject monitor interfaces.

    See line \ref{lst:af-lineref-subject-monitor} in listing
    \ref{lst:annotated-policy} for an example monitor section.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="state"       type="monitorSubjectRefType" minOccurs="0" maxOccurs="unbounded"/>
   <xs:element name="timed_event" type="monitorSubjectRefType" minOccurs="0" maxOccurs="unbounded"/>
   <xs:element name="interrupts"  type="monitorSubjectRefType" minOccurs="0" maxOccurs="unbounded"/>
   <xs:element name="loader"      type="loaderSubjectRefType"  minOccurs="0" maxOccurs="1"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="loaderSubjectRefType">
  <xs:attribute name="subject"        type="nameType"   use="required"/>
  <xs:attribute name="logical"        type="nameType"   use="required"/>
  <xs:attribute name="virtualAddress" type="word64Type" use="required"/>
 </xs:complexType>

 <xs:complexType name="monitorSubjectRefType">
  <xs:complexContent>
   <xs:extension base="loaderSubjectRefType">
    <xs:attribute name="writable" type="booleanType" use="required"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>

 <xs:complexType name="componentReferenceType">
  <xs:annotation>
   <xs:documentation>
    The \texttt{component} reference element specifies which component this
    subject instantiates. All logical resources required by the component must
    be mapped to physical resources of the appropriate type. Validators make
    sure that all requirements are satisfied and that no mapping has been
    omitted.

    See line \ref{lst:af-lineref-subject-comp} in listing
    \ref{lst:annotated-policy} for an example component reference.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="map" type="resourceMappingType" minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
  <xs:attribute name="ref" type="nameType" use="required"/>
 </xs:complexType>

 <xs:complexType name="resourceMappingType">
  <xs:sequence>
   <xs:element name="map" type="resourceMappingType" minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
  <xs:attribute name="logical"  type="nameType" use="required"/>
  <xs:attribute name="physical" type="nameType" use="required"/>
 </xs:complexType>

</xs:schema>
