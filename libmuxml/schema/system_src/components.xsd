<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">

 <xs:complexType name="componentsType">
  <xs:annotation>
   <xs:documentation>
    The \texttt{components} element holds a list of components and component
    libraries.

    Note that components are a policy source format abstraction. The toolchain
    resolves this concept into subjects by adding the appropriate memory
    regions, events and devices.

    See line \ref{lst:af-lineref-components} in listing \ref{lst:annotated-policy}
    for an example components section.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="library"   type="libraryType"   minOccurs="0" maxOccurs="unbounded"/>
   <xs:element name="component" type="componentType" minOccurs="1" maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="componentType">
  <xs:annotation>
   <xs:documentation>
    A component is a piece of software which shall be executed by the SK. They
    represent the building blocks of a component-based system and can be
    regarded as templates for executable entities instantiated by subjects.

    The specification of a component declares the binary program file including
    the virtual memory location as well as the view of the expected execution
    environment. The component environment is therefore defined by the following
    resources:

    \begin{itemize}
    \item Binary file
    \item Logical channels
    \item Logical memory regions
    \item Logical devices
    \end{itemize}

    Components are identified by name and specify a profile. The profile
    controls the settings of the virtual CPU (vCPU).

    See line \ref{lst:af-lineref-component} in listing \ref{lst:annotated-policy}
    for an example component.
   </xs:documentation>
  </xs:annotation>
  <xs:complexContent>
   <xs:extension base="libraryType">
    <xs:attribute name="profile" type="componentProfileType" use="required"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>

 <xs:complexType name="libraryType">
  <xs:annotation>
   <xs:documentation>
    A component library is a specialized component specification which is used
    to share common resources required for library code to operate. Component
    libraries can be included by multiple components in order to share
    functionality. An example is a logging service provided by a dedicated
    component, whereas the logging client is provided as a library with a shared
    memory channel for the actual log messages.

    A component specification declares library dependencies to request the
    library resources from the system through the inclusion of the library
    specification in the \texttt{depends} section. This way components inherit
    the resources of libraries.

    On the source code level, a library is included by mechanisms provided by
    the respective programming language. Note that the component library code is
    \emph{not} shared between components but lives in the isolated execution
    environment of a subject instantiating the component.

    Libraries can request the same resources as ordinary components, but the
    binary element is omitted in the specification. A subject instantiating the
    component must also map the resources requested by libraries the component
    depends on.

    See line \ref{lst:af-lineref-complib} in listing \ref{lst:annotated-policy}
    for example library specifications.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="config"   type="configType"            minOccurs="0" maxOccurs="1"/>
   <xs:element name="depends"  type="libraryDepsType"       minOccurs="0" maxOccurs="1"/>
   <xs:element name="requires" type="requiredResourcesType" minOccurs="0" maxOccurs="1"/>
   <xs:element name="provides" type="providedResourcesType" minOccurs="0" maxOccurs="1"/>
  </xs:sequence>
  <xs:attribute name="name" type="nameType" use="required">
   <xs:annotation>
    <xs:documentation>
     Library name.
    </xs:documentation>
   </xs:annotation>
  </xs:attribute>
 </xs:complexType>

 <xs:complexType name="libraryDepsType">
  <xs:annotation>
   <xs:documentation>
    Components and libraries are allowed to declare dependencies to other
    libraries. All resources required by the included library are merged with
    the ones specified by the component or library. Libraries can depend on
    other libraries.

    A subject realizing this component must then correctly map all component and
    library resource requirements to physical resources in order to fulfill the
    expectations.

    See line \ref{lst:af-lineref-compdeps} in listing \ref{lst:annotated-policy}
    for example dependency section.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="library" type="namedRefType" minOccurs="1" maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="requiredResourcesType">
  <xs:annotation>
   <xs:documentation>
    Declaration of resources a component or library requires to operate.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="vcpu"     type="vcpuType"            minOccurs="0" maxOccurs="1"/>
   <xs:element name="memory"   type="logicalMemoryType"   minOccurs="0" maxOccurs="1"/>
   <xs:element name="channels" type="logicalChannelsType" minOccurs="0" maxOccurs="1"/>
   <xs:element name="devices"  type="logicalDevicesType"  minOccurs="0" maxOccurs="1"/>
   <xs:element name="events"   type="logicalEventsType"   minOccurs="0" maxOccurs="1"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="providedResourcesType">
  <xs:sequence>
   <xs:element name="memory" type="providedMemType" minOccurs="1" maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="binaryType">
  <xs:attribute name="filename"       type="xs:string"      use="required"/>
  <xs:attribute name="size"           type="memorySizeType" use="required"/>
  <xs:attribute name="virtualAddress" type="word64Type"     use="required"/>
 </xs:complexType>

 <xs:complexType name="providedMemType">
  <xs:complexContent>
   <xs:extension base="memoryBaseType">
    <xs:attributeGroup ref="memBaseAttrs"/>
    <xs:attribute name="virtualAddress" type="word64Type"            use="required"/>
    <xs:attribute name="type"           type="subjectMemoryKindType" use="optional"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>

 <xs:complexType name="logicalChannelsType">
  <xs:choice minOccurs="0" maxOccurs="unbounded">
   <xs:element name="reader" type="logicalChannelReaderType"/>
   <xs:element name="writer" type="logicalChannelWriterType"/>
   <xs:element name="array"  type="channelArrayType"/>
  </xs:choice>
 </xs:complexType>

 <xs:complexType name="logicalMemoryType">
  <xs:annotation>
   <xs:documentation>
    In this section, components can specify expected memory mappings with given
    access rights and region size.

    See line \ref{lst:af-lineref-compreq-mem} in listing
    \ref{lst:annotated-policy} an example specification.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:choice minOccurs="0" maxOccurs="unbounded">
    <xs:element name="memory" type="logicalMemType"/>
    <xs:element name="array"  type="memoryArrayType"/>
   </xs:choice>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="logicalMemType">
  <xs:attributeGroup ref="memBaseAttrs"/>
  <xs:attribute name="size"           type="word64Type" use="required"/>
  <xs:attribute name="virtualAddress" type="word64Type" use="required"/>
 </xs:complexType>

 <xs:complexType name="logicalDevicesType">
  <xs:sequence>
   <xs:element name="device" type="logicalDeviceType" minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="logicalDeviceType">
  <xs:sequence>
   <xs:element name="irq"    type="logicalIrqType"    minOccurs="0" maxOccurs="unbounded"/>
   <xs:element name="memory" type="logicalMemType"    minOccurs="0" maxOccurs="unbounded"/>
   <xs:element name="ioPort" type="logicalIoPortType" minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
  <xs:attribute name="logical" type="nameType" use="required"/>
 </xs:complexType>

 <xs:complexType name="logicalIrqType">
  <xs:sequence>
   <xs:element name="msi" type="logicalMsiIrqType" minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
  <xs:attribute name="logical" type="nameType"   use="required"/>
  <xs:attribute name="vector"  type="vectorType" use="required"/>
 </xs:complexType>

 <xs:complexType name="logicalMsiIrqType">
  <xs:attribute name="logical" type="nameType" use="required"/>
 </xs:complexType>

 <xs:complexType name="logicalIoPortType">
  <xs:attribute name="logical" type="nameType"   use="required"/>
  <xs:attribute name="start"   type="word16Type" use="required"/>
  <xs:attribute name="end"     type="word16Type" use="required"/>
 </xs:complexType>

 <xs:complexType name="logicalChannelReaderType">
  <xs:attribute name="logical"        type="nameType"   use="required"/>
  <xs:attribute name="virtualAddress" type="word64Type" use="required"/>
  <xs:attribute name="size"           type="word64Type" use="required"/>
  <xs:attribute name="vector"         type="vectorType" use="optional"/>
 </xs:complexType>

 <xs:complexType name="logicalChannelWriterType">
  <xs:attribute name="logical"        type="nameType"              use="required"/>
  <xs:attribute name="virtualAddress" type="word64Type"            use="required"/>
  <xs:attribute name="size"           type="word64Type"            use="required"/>
  <xs:attribute name="event"          type="xs:nonNegativeInteger" use="optional"/>
 </xs:complexType>

 <xs:attributeGroup name="arrayBaseAttrs">
  <xs:attribute name="virtualAddressBase" type="word64Type" use="required"/>
  <xs:attribute name="elementSize"        type="word64Type" use="required"/>
 </xs:attributeGroup>

 <xs:complexType name="arrayEntryType">
  <xs:attribute name="logical" type="nameType" use="required"/>
 </xs:complexType>

 <xs:complexType name="memoryArrayType">
  <xs:sequence>
   <xs:element name="memory" type="arrayEntryType" minOccurs="1" maxOccurs="unbounded"/>
  </xs:sequence>
  <xs:attributeGroup ref="memBaseAttrs"/>
  <xs:attributeGroup ref="arrayBaseAttrs"/>
 </xs:complexType>

 <xs:complexType name="channelArrayType">
  <xs:choice>
   <xs:element name="reader" type="arrayEntryType" minOccurs="1" maxOccurs="unbounded"/>
   <xs:element name="writer" type="arrayEntryType" minOccurs="1" maxOccurs="unbounded"/>
  </xs:choice>
  <xs:attributeGroup ref="arrayBaseAttrs"/>
  <xs:attribute name="logical"    type="nameType"              use="required"/>
  <xs:attribute name="eventBase"  type="xs:nonNegativeInteger" use="optional"/>
  <xs:attribute name="vectorBase" type="vectorType"            use="optional"/>
 </xs:complexType>

 <xs:complexType name="logicalEventsType">
  <xs:sequence>
   <xs:element name="source" type="logicalEventSourceType" minOccurs="0" maxOccurs="1"/>
   <xs:element name="target" type="logicalEventTargetType" minOccurs="0" maxOccurs="1"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="logicalEventSourceType">
  <xs:sequence>
   <xs:element name="event" type="logicalSourceEventEntryType" minOccurs="1" maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="logicalEventTargetType">
  <xs:sequence>
   <xs:element name="event" type="logicalTargetEventEntryType" minOccurs="1" maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="baseLogicalEventType">
  <xs:attribute name="logical" type="nameType" use="required"/>
 </xs:complexType>

 <xs:complexType name="logicalSourceEventEntryType">
  <xs:complexContent>
   <xs:extension base="baseLogicalEventType">
     <xs:group ref="sourceEventActionsGroup" minOccurs="0" maxOccurs="1"/>
     <xs:attribute name="id" type="xs:nonNegativeInteger" use="required"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>

 <xs:complexType name="logicalTargetEventEntryType">
  <xs:complexContent>
   <xs:extension base="baseLogicalEventType">
    <xs:group ref="targetEventActionsGroup" minOccurs="0" maxOccurs="1"/>
     <xs:attribute name="id" type="xs:nonNegativeInteger" use="optional"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>

 <xs:simpleType name="componentProfileType">
  <xs:restriction base="xs:string">
   <xs:enumeration value="native"/>
   <xs:enumeration value="vm"/>
   <xs:enumeration value="linux"/>
  </xs:restriction>
 </xs:simpleType>

</xs:schema>
